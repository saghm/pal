use std::str::FromStr;

use ast::{BinOp, Expr, Statement, Type, Value};
use token::{self, Token};

grammar<'input>(text: &'input str);

// Macros -----------------------------------------------------------------------------------------

BinExp<Op, NextLevel>: Expr = {
    <lhs:BinExp<Op, NextLevel>> <op:Op> <rhs:NextLevel> =>
        Expr::BinExp(Box::new(lhs), op, Box::new(rhs)),
    NextLevel,
};

List<T>: Vec<T> = {
    <T> => vec![<>],
    <list:List<T>> "," <elem:T> => {
        let mut vec = list;
        vec.push(elem);
        vec
    }
};

ParenList<T>: Vec<T> = "(" <List<T>?> ")" => <>.unwrap_or(Vec::new());


// Statements -------------------------------------------------------------------------------------

pub Stmt: Statement = {
    SimpleStmt,
    <Type> <Ident> <Params> <Block> => Statement::Defun(<>),
};

SimpleStmt: Statement = {
    <arr_elem:ArrayElem> "=" <e:Exp> ";" => Statement::ArrayElemAssign(arr_elem.0, arr_elem.1, arr_elem.2, e),
    "let" <Ident> "=" <Exp> ";" => Statement::Let(<>),
    "print" <Exp> ";" => Statement::Print(<>),
    "for" <Ident> "in" <Exp> <Block> => Statement::For(<>),
    "if" <clause:Clause> <block:Block> => Statement::If(clause, block, Vec::new()),
    "if" <clause:Clause> <block1:Block> <block2:ElseBlocks> => Statement::If(clause, block1, block2),
    "while" <clause:Clause> <block:Block> => Statement::While(clause, block),
    <Ident> "=" <Exp> ";" => Statement::VarAssign(<>),
    <Ident> <ParenList<Exp>> ";" => Statement::VoidCall(<>),
    "return" <Exp> ";" => Statement::Return(<>),
};

Block = "{" <SimpleStmt*> "}";
Clause = "(" <Exp> ")";
Else = "else" <Block>;
ElseIf = "else" "if" <Clause> <Block>;
IdentList = List<Ident>;

ElseBlocks: Vec<Statement> = {
    Else,
    <ElseIf> => vec![Statement::If(<>.0, <>.1, Vec::new())],
    <elsif:ElseIf> <els:ElseBlocks> => vec![Statement::If(elsif.0, elsif.1, els)],
};

Params = ParenList<Ident>;

Type: Type = {
    "array" => Type::Array,
    "boolean" => Type::Bool,
    "int" => Type::Int,
    "string" => Type::Str,
    "void" => Type::Void,
};

// Expressions ------------------------------------------------------------------------------------

Exp: Expr = OrExp;

OrExp = BinExp<OrOp, AndExp>;
OrOp: BinOp = "||" => BinOp::Or;

AndExp = BinExp<AndOp, EqExp>;
AndOp: BinOp = "&&" => BinOp::And;

EqExp = BinExp<EqOp, InEqExp>;
EqOp: BinOp = {
    "=" "=" => BinOp::Equal,
    "!" "=" => BinOp::NotEqual,
};

InEqExp = BinExp<InEqOp, AddExp>;
InEqOp: BinOp = {
    ">" "=" => BinOp::GreaterOrEqual,
    ">" => BinOp::GreaterThan,
    "<" "=" => BinOp::LessOrEqual,
    "<" => BinOp::LessThan,
};

AddExp = BinExp<AddOp, MulExp>;
AddOp: BinOp = {
    "+" => BinOp::Plus,
    "-" => BinOp::Minus,
};

MulExp = BinExp<MulOp, NotExp>;
MulOp: BinOp = {
    "*" => BinOp::Times,
    "/" => BinOp::Divide,
    "%" => BinOp::Modulus,
};

NotExp: Expr = {
    "!" <NotExp> => Expr::Not(Box::new(<>)),
    Call,
};

Call: Expr = {
    <Ident> <ParenList<Exp>> => Expr::Call(<>),
    Term,
};

Term: Expr = {
    "[" <List<Exp>?> "]" => Expr::Array(<>.unwrap_or(Vec::new())),
    ArrayElem => Expr::ArrayElement(<>.0, Box::new(<>.1), <>.2),
    Ident => Expr::Var(<>),
    Value => Expr::Value(<>),
    "(" <Exp> ")",
};

ArrayElem: (String, Expr, Vec<Expr>) = <var:Ident> <idxs:Index+> => {
    let mut vec = idxs;

    (var, vec.remove(0), vec)
};

Index = "[" <Exp> "]";

Value: Value = {
    "true" => Value::Bool(true),
    "false" => Value::Bool(false),
    Int => Value::Int(<>),
    Str => Value::Str(<>),
};

Int: i64 = "I64" => i64::from_str(<>).unwrap();
Ident: String = "Ident" => String::from(<>);
Str: String = "StringLit" => String::from(<>);

extern {
    type Location = usize;
    type Error = token::Error;

    enum Token<'input> {
        "true" => Token::True,
        "false" => Token::False,
        "I64" => Token::I64(<&'input str>),
        "Ident" => Token::Ident(<&'input str>),
        "let" => Token::Let,
        "print" => Token::Print,
        "if" => Token::If,
        "else" => Token::Else,
        "while" => Token::While,
        "return" => Token::Return,
        "for" => Token::For,
        "in" => Token::In,
        "array" => Token::Array,
        "boolean" => Token::Boolean,
        "int" => Token::Int,
        "string" => Token::Str,
        "void" => Token::Void,
        "!" => Token::Bang,
        "&&" => Token::DoubleAmp,
        "||" => Token::DoubleBars,
        "=" => Token::Equal,
        ">" => Token::GreaterThan,
        "<" => Token::LessThan,
        "-" => Token::Minus,
        "%" => Token::Percent,
        "+" => Token::Plus,
        "/" => Token::Slash,
        "*" => Token::Star,
        "," => Token::Comma,
        ";" => Token::Semicolon,
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "{" => Token::LeftBrace,
        "}" => Token::RightBrace,
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        "StringLit" => Token::StringLiteral(<&'input str>),
    }
}
